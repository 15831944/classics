<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="OutDir;Configuration">
  <!-- This file is imported by all projects at the beginning of the project files -->
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"
          Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
  </PropertyGroup>

  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Url ParameterType="System.String" Required="true" />
      <Destination ParameterType="System.String" Required="true" />
      <OverwriteExisting ParameterType="System.Boolean" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            if (OverwriteExisting || !File.Exists(Destination))
            {
                Log.LogMessage("Downloading from " + Url);
                new WebClient().DownloadFile(Url, Destination);
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="Unzip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Archive ParameterType="System.String" Required="true" />
      <Destination ParameterType="System.String" Required="true" />
      <OverwriteExisting ParameterType="System.Boolean" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            using (var stream = new FileStream(Archive, FileMode.Open))
            using (var archive = new ZipArchive(stream))
            {
                foreach (var entry in archive.Entries)
                {
                    var destinationFile = Path.Combine(Destination, entry.FullName);
                    var directory = Path.GetDirectoryName(destinationFile);
                    Directory.CreateDirectory(directory);
                    if (OverwriteExisting || !File.Exists(destinationFile))
                    {
                        Log.LogMessage("Unzipping to " + destinationFile);
                        using (var entryStream = entry.Open())
                        using (var outputFile = new FileStream(destinationFile, FileMode.Create))
                        {
                            entryStream.CopyTo(outputFile);
                        }
                    }
                }
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Common project settings -->
  <PropertyGroup>
    <TargetFrameworkVersion>v4.6</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <SccProjectName>SAK</SccProjectName>
    <SccLocalPath>SAK</SccLocalPath>
    <SccAuxPath>SAK</SccAuxPath>
    <SccProvider>SAK</SccProvider>
    <HighEntropyVA>true</HighEntropyVA>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DebugType>pdbonly</DebugType>
    <DefineConstants>TRACE</DefineConstants>
    <Optimize>true</Optimize>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutputPath)' == ''">
    <!-- If we don't already have an OutputPath, set one-->
    <OutputPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\Binaries\$(Configuration)'))\</OutputPath>
  </PropertyGroup>

</Project>
